{"version":3,"file":"static/js/873.a1863341.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Имя обязательно\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email обязателен\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Некорректный email\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col, Dropdown } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit: formSubmit } = useForm(validate);\r\n  const [submissionStatus, setSubmissionStatus] = useState<string>('');\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n\r\n  return (\r\n      <ContactContainer id={id}>\r\n        <Row justify=\"space-between\" align=\"middle\">\r\n          <Col lg={12} md={11} sm={24} xs={24}>\r\n            <Slide direction=\"left\" triggerOnce>\r\n              <Block title={title} content={content} />\r\n            </Slide>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={24} xs={24}>\r\n            <Slide direction=\"right\" triggerOnce>\r\n              <FormGroup autoComplete=\"off\">\r\n                <Col span={24}>\r\n                  <Input\r\n                      type=\"text\"\r\n                      name=\"email\"\r\n                      placeholder=\"Ваша почта\"\r\n                      value={values.email || \"\"}\r\n                      onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"email\" />\r\n                </Col>\r\n                <ButtonContainer>\r\n                  <Button onClick={()=>{alert('Пока недоступно')}} name=\"submit\">{t(\"Отправить\")}</Button>\r\n                </ButtonContainer>\r\n                {submissionStatus === 'success' && <Span style={{ color: 'green' }}>Успешная регистрация на подписку</Span>}\r\n                {submissionStatus === 'error' && <Span style={{ color: 'red' }}>Ошибка при отправке формы (возможно, такой email уже подписан)</Span>}\r\n              </FormGroup>\r\n            </Slide>\r\n          </Col>\r\n        </Row>\r\n      </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","_useForm","_useState","useState","_objectSpread","_useState2","_slicedToArray","formState","setFormState","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","prevState","Object","every","error","fetch","method","headers","body","JSON","stringify","sent","ok","target","reset","notification","description","t0","stop","_x","apply","arguments","handleChange","persist","_event$target","value","_defineProperty","useForm","submissionStatus","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","span","Input","Button","onClick","alert","style","color"],"sourceRoot":""}